!function(e){function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}var t={};return r.m=e,r.c=t,r.p="dist/",r(0)}([function(e,r,t){e.exports=t(1)},function(e,r,t){var n=t(2),o=t(20),i=t(21),s=function(e){if(!e||0===e.length)throw new i;this._sources=e};s.prototype={get:function(e){var r=this;return new o(function(t){var o={jsonGraph:{}};return n(r._sources,0,e,o,t)})},set:function(e){var r=this._sources[0];return r.set(e)},call:function(e,r,t,n){}},e.exports=s},function(e,r,t){var n=t(3),o={dispose:function(){}},i=t(4),s=t(5),a=s.optimizePathSets,f=s.collapse,u=10;e.exports=function c(e,r,t,s,p,l){var h=e[r],v=t;if(l=l||new n,r>1&&v&&v.length&&(v=a(s.jsonGraph,v,u),v.length&&(v=f(v))),!h||!v||0===v.length)return s.unhandledPaths=v,p.onNext(s),p.onCompleted(),l.currentDisposable=o,l;var d;return l.currentDisposable=h.get(v).subscribe(function(e){d=e},function(e){return l.disposed?void 0:((r>0||d)&&(d&&i(s,d),p.onNext(s)),Array.isArray(e)?void p.onError(e):void p.onError(v.map(function(r){return{path:r,value:e}})))},function(){if(!l.disposed){0===r?s={jsonGraph:d.jsonGraph}:i(s,d);var t=d.unhandledPaths;t&&t.length?c(e,r+1,t,s,p,l):(p.onNext(s),p.onCompleted())}}),l}},function(e,r){var t=function(e){this.disposed=!1,this.currentDisposable=e};t.prototype={dispose:function(){if(!this.disposed&&this.currentDisposable){this.disposed=!0;var e=this.currentDisposable;e.dispose?e.dispose():e()}}},e.exports=t},function(e,r){function t(e,r){n(e.jsonGraph,r.jsonGraph)}function n(e,r,t,o){if(r.$type||"object"!=typeof r||null===r)return void(t[o]=r);var i,s,a=Object.keys(r);for(i=0,s=a.length;s>i;++i){var f=a[i];e[f]||(e[f]={}),n(e[f],r[f],e,f)}}e.exports=t},function(e,r,t){e.exports={iterateKeySet:t(6),toTree:t(7),toTreeWithUnion:t(8),pathsComplementFromTree:t(9),pathsComplementFromLengthTree:t(11),hasIntersection:t(10),toPaths:t(12),collapse:t(13),optimizePathSets:t(14)}},function(e,r){function t(e,r){var t=r.from=e.from||0,n=r.to=e.to||"number"==typeof e.length&&r.from+e.length-1||0;r.rangeOffset=r.from,r.loaded=!0,t>n&&(r.empty=!0)}function n(e,r){r.done=!1;var t=r.isObject=!(!e||"object"!=typeof e);r.isArray=t&&o(e),r.arrayOffset=0}var o=Array.isArray;e.exports=function(e,r){if(void 0===r.isArray&&n(e,r),r.isArray){var o;do{r.loaded&&r.rangeOffset>r.to&&(++r.arrayOffset,r.loaded=!1);var i=r.arrayOffset,s=e.length;if(i>=s){r.done=!0;break}var a=e[r.arrayOffset],f=typeof a;if("object"===f){if(r.loaded||t(a,r),r.empty)continue;o=r.rangeOffset++}else++r.arrayOffset,o=a}while(void 0===o);return o}return r.isObject?(r.loaded||t(e,r),r.rangeOffset>r.to?void(r.done=!0):r.rangeOffset++):(r.done=!0,e)}},function(e,r,t){function n(e,r,t){var i,s=r[t],a={},f=t+1;i=o(s,a);do{var u=e[i];u||(f===r.length?e[i]=null:u=e[i]={}),f<r.length&&n(u,r,f),a.done||(i=o(s,a))}while(!a.done)}var o=t(6);Array.isArray;e.exports=function(e){return e.reduce(function(e,r){return n(e,r,0),e},{})}},function(e,r){},function(e,r,t){var n=t(10);e.exports=function(e,r){for(var t=[],o=-1,i=0,s=e.length;s>i;++i)n(r,e[i],0)||(t[++o]=e[i]);return t}},function(e,r,t){var n=t(6);e.exports=function o(e,r,t){for(var i=e,s=!0;s&&t<r.length;++t){var a=r[t],f=typeof a;if(a&&"object"===f){var u={},c=n(a,u),p=t+1;do{var l=i[c];s=void 0!==l,s&&(s=o(l,r,p)),c=n(a,u)}while(s&&!u.done);break}i=i[a],s=void 0!==i}return s}},function(e,r,t){var n=t(10);e.exports=function(e,r){for(var t=[],o=-1,i=0,s=e.length;s>i;++i){var a=e[i];n(r[a.length],a,0)||(t[++o]=a)}return t}},function(e,r){function t(e){return null!==e&&typeof e===p}function n(e,r,t){var o,i,s,c,p,l,h,v,d,g,y,b,x,m,j=f(String(r)),w=Object.create(null),O=[],A=-1,k=0,$=[],E=0;if(c=[],p=-1,t-1>r){for(l=a(e,c);++p<l;)o=c[p],i=n(e[o],r+1,t),s=i.code,w[s]?i=w[s]:(O[k++]=s,i=w[s]={keys:[],sets:i.sets}),j=f(j+o+s),u(o)&&i.keys.push(parseInt(o,10))||i.keys.push(o);for(;++A<k;)if(o=O[A],i=w[o],c=i.keys,l=c.length,l>0)for(h=i.sets,v=-1,d=h.length,x=c[0];++v<d;){for(g=h[v],y=-1,b=g.length,m=new Array(b+1),m[0]=l>1&&c||x;++y<b;)m[y+1]=g[y];$[E++]=m}}else for(l=a(e,c),l>1?$[E++]=[c]:$[E++]=c;++p<l;)j=f(j+c[p]);return{code:j,sets:$}}function o(e){for(var r=-1,t=e.length;++r<t;){var n=e[r];c(n)&&(e[r]=i(n))}return e}function i(e){for(var r=-1,t=e.length-1,n=t>0;++r<=t;){var o=e[r];if(!u(o)){n=!1;break}e[r]=parseInt(o,10)}if(n===!0){e.sort(s);var i=e[0],a=e[t];if(t>=a-i)return{from:i,to:a}}return e}function s(e,r){return e-r}function a(e,r,t){var n=0;for(var o in e)r[n++]=o;return n>1&&r.sort(t),n}function f(e){for(var r=5381,t=-1,n=e.length;++t<n;)r=(r<<5)+r+e.charCodeAt(t);return String(r)}function u(e){return!c(e)&&e-parseFloat(e)+1>=0}var c=Array.isArray,p="object";e.exports=function(e){var r,i=[],s=0;for(var a in e)if(u(a)&&t(r=e[a]))for(var f=n(r,0,parseInt(a,10)).sets,c=-1,p=f.length;++c<p;)i[s++]=o(f[c]);return i}},function(e,r,t){var n=t(12),o=t(7);e.exports=function(e){var r=e.reduce(function(e,r){var t=r.length;return e[t]||(e[t]=[]),e[t].push(r),e},{});return Object.keys(r).forEach(function(e){r[e]=o(r[e])}),n(r)}},function(e,r,t){function n(e,r,t,a,c,p,l){if(void 0===e)return void(c[c.length]=s(p,t,a));if(!(null===e||e.$type&&e.$type!==f||"object"!=typeof e||e.$type===f&&a===t.length)){var h=t[a],v="object"==typeof h,d=a+1,g=!1,y=h;v&&(g={},y=o(h,g));var b,x;do{b=e[y];var m=p.length;if(null!==y&&(p[m]=y),b&&b.$type===f&&d<t.length){var j=u(r,b.value,l);b=j[0],x=i(j[1])}else x=p;n(b,r,t,d,c,x,l),p.length=m,g&&!g.done&&(y=o(h,g))}while(g&&!g.done)}}var o=t(6),i=t(15),s=t(16),a=t(17),f=a.$ref,u=t(18);e.exports=function(e,r,t){var o=[];return r.forEach(function(r){n(e,e,r,0,o,[],t)}),o}},function(e,r){function t(e,r){for(var t=[],n=e.length,o=r||0;n>o;o++)t[o]=e[o];return t}e.exports=t},function(e,r){e.exports=function(e,r,t){var n,o,i,s=[];for(n=0,i=e.length;i>n;++n)s[n]=e[n];for(o=t||0,i=r.length;i>o;++o,++n)s[n]=r[o];return s}},function(e,r){e.exports={$ref:"ref",$atom:"atom",$error:"error"}},function(e,r,t){var n=t(15),o=t(17).$ref,i=t(19);e.exports=function(e,r,t){for(var s,a,f,u=e,c=r,p=-1,l=c.length,h=0;++p<l;){if(s=c[p],a=u[s],f=a&&a.$type,!a||f&&f!==o){u=a;break}if(f&&f===o&&l>p+1){var v=new Error(i.innerReferences);throw v.throwToNext=!0,v}if(p+1===l&&(f===o&&(p=-1,c=a.value,l=c.length,a=e,h++),h>t))throw new Error(i.circularReference);u=a}return[u,n(c)]}},function(e,r){e.exports={innerReferences:"References with inner references are not allowed.",circularReference:"There appears to be a circular reference, maximum reference following exceeded."}},function(e,r){function t(e){this._subscribe=e}var n=function(){},o={dispose:n};t.prototype.subscribe=function(e,r,t){var i=e;i&&"object"==typeof i||(i={onNext:e||n,onError:r||n,onCompleted:t||n});var s=this._subscribe(i);switch(typeof s){case"function":return{dispose:s};case"object":return s||o;default:return o}},e.exports=t},function(e,r){function t(){this.message=n,this.stack=(new Error).stack}var n="The DataSourceChainer requires at least one dataSource in its constructor.";t.prototype=new Error,t.message=n,e.exports=t}]);
//# sourceMappingURL=data:application/json;base64,